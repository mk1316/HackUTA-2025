{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/piyushsingh/HackUTA-2025/re-factor/src/app/api/generate-audio/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * API route for generating audio from text using ElevenLabs\n * Converts humorous summary text to natural-sounding speech\n * \n * @param request - Next.js request object containing the text to convert\n * @returns Audio file or error message\n */\nexport async function POST(request: NextRequest): Promise<NextResponse> {\n  try {\n    const { text } = await request.json();\n\n    // Validate text input\n    if (!text || typeof text !== 'string') {\n      return NextResponse.json(\n        { error: 'Text is required' }, \n        { status: 400 }\n      );\n    }\n\n    // Validate API key presence\n    const apiKey = process.env.ELEVENLABS_API_KEY;\n    if (!apiKey) {\n      console.error('ELEVENLABS_API_KEY environment variable is not set');\n      return NextResponse.json(\n        { error: 'Audio service configuration error' }, \n        { status: 500 }\n      );\n    }\n\n    // ElevenLabs API configuration\n    const voiceId = process.env.ELEVENLABS_VOICE_ID || '21m00Tcm4TlvDq8ikWAM'; // Default voice\n    const modelId = 'eleven_monolingual_v1'; // Fast model for better performance\n    \n    // Prepare request to ElevenLabs\n    const elevenLabsResponse = await fetch(\n      `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`,\n      {\n        method: 'POST',\n        headers: {\n          'Accept': 'audio/mpeg',\n          'Content-Type': 'application/json',\n          'xi-api-key': apiKey,\n        },\n        body: JSON.stringify({\n          text: text,\n          model_id: modelId,\n          voice_settings: {\n            stability: 0.5,\n            similarity_boost: 0.75,\n            style: 0.0,\n            use_speaker_boost: true\n          }\n        }),\n      }\n    );\n\n    if (!elevenLabsResponse.ok) {\n      const errorData = await elevenLabsResponse.text();\n      console.error('ElevenLabs API error:', errorData);\n      return NextResponse.json(\n        { error: 'Failed to generate audio' }, \n        { status: 500 }\n      );\n    }\n\n    // Get the audio data\n    const audioBuffer = await elevenLabsResponse.arrayBuffer();\n    \n    // Return the audio file\n    return new NextResponse(audioBuffer, {\n      status: 200,\n      headers: {\n        'Content-Type': 'audio/mpeg',\n        'Content-Length': audioBuffer.byteLength.toString(),\n        'Cache-Control': 'public, max-age=3600', // Cache for 1 hour\n      },\n    });\n\n  } catch (error) {\n    // Log error for debugging\n    console.error('Error generating audio:', error);\n    \n    // Return user-friendly error message\n    return NextResponse.json(\n      { \n        error: 'Failed to generate audio. Please try again.',\n        success: false \n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AASO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEnC,sBAAsB;QACtB,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;YACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,4BAA4B;QAC5B,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;QAC7C,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,UAAU,QAAQ,GAAG,CAAC,mBAAmB,IAAI,wBAAwB,gBAAgB;QAC3F,MAAM,UAAU,yBAAyB,oCAAoC;QAE7E,gCAAgC;QAChC,MAAM,qBAAqB,MAAM,MAC/B,CAAC,4CAA4C,EAAE,SAAS,EACxD;YACE,QAAQ;YACR,SAAS;gBACP,UAAU;gBACV,gBAAgB;gBAChB,cAAc;YAChB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,MAAM;gBACN,UAAU;gBACV,gBAAgB;oBACd,WAAW;oBACX,kBAAkB;oBAClB,OAAO;oBACP,mBAAmB;gBACrB;YACF;QACF;QAGF,IAAI,CAAC,mBAAmB,EAAE,EAAE;YAC1B,MAAM,YAAY,MAAM,mBAAmB,IAAI;YAC/C,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,cAAc,MAAM,mBAAmB,WAAW;QAExD,wBAAwB;QACxB,OAAO,IAAI,gJAAY,CAAC,aAAa;YACnC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,kBAAkB,YAAY,UAAU,CAAC,QAAQ;gBACjD,iBAAiB;YACnB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,0BAA0B;QAC1B,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,qCAAqC;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS;QACX,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}